" VAM Setup {
    let g:vim_addon_manager = {'auto_install' : 1 }
        " Set up VAM {
            fun SetupVAM()
                let vam_install_path = expand('$HOME') . '/.vim/vim-addons'
                exec 'set rtp+='.vam_install_path.'/vim-addon-manager'
                let g:vim_addon_manager = {'auto_install' : 1 }
                if !isdirectory(vam_install_path.'/vim-addon-manager/autoload')
                    execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(vam_install_path, 1).'/vim-addon-manager'
                endif
                call vam#ActivateAddons([], {'auto_install' : 1})
            endfun
            call SetupVAM()
        " }
    " }

" Basic Addons {
    call vam#ActivateAddons(['Zenburn'])            " zenburn colorscheme
    call vam#ActivateAddons(['vim-addon-mw-utils']) " cache file contents
    call vam#ActivateAddons(['fugitive'])           " fugitive git is best git
    call vam#ActivateAddons(['gitv'])               " neat git visualizer
    if executable('ack-grep')                       " a slave uses grep; a man uses ack!
        let g:ackprg='ack-grep -H --nocolor --nogroup --column'
        call vam#ActivateAddons(['ack'])
    elseif executable('ack')
        call vam#ActivateAddons(['ack'])
    endif
" }

" Adds a little functionality for local addon activation {
    if filereadable(expand('~/.vimrc.addons.local'))
        source ~/.vimrc.addons.local
    endif
" }

" Optional Addon Groups {
    " To limit the addons used, list the groups you want to use in
    " .vimrc.addons.local
    if !exists(g:addon_groups)
        let g:addon_groups=['general',     " these should cover a majority of users
                            'snippets',    " only a million times better than snipmate
                            'programming', " a couple of nice tools for the enlightened programmer
                            'haskell',     " <3
                            'latex',       " \leq 3
                            'js',          " JS is the new JS
                            'html',        " High 5
                            'ruby',        " I've been meaning to learn
                            'python',      " poor man's programming
                            'php'          " broke man's programming
                            ]
    endif

    " General use addons {
        if count(g:addon_groups, 'general')
            call vam#ActivateAddons(['The_NERD_Tree'])              " popular, though I don't use it much
            call vam#ActivateAddons(['surround'])                   " very convenient
            call vam#ActivateAddons(['delimitMate'])                " A little nicer than AutoClose
            call vam#ActivateAddons(['ctrlp'])                      " preferable to Ctrl-T
            call vam#ActivateAddons(['ctrlp-modified'])             " not sure what this does, but we'll see
            call vam#ActivateAddons(['matchit.zip'])                " make % cool
            call vam#ActivateAddons(['Powerline'])                  " Powerline is where it's at
            call vam#ActivateAddons(['EasyMotion'])                 " make motion commands sexy again
            call vam#ActivateAddons(['CSApprox'])                   " if for some reason Zenburn is not to your taste
            call vam#ActivateAddons(['undotree'])                   " it's practically magic
            call vam#ActivateAddons(['github:myusuf3/numbers.vim']) " never count lines again!
            call vam#ActivateAddons(['Indent_Guides'])              " don't count your tabs, either
            call vam#ActivateAddons(['restore_view'])               " save some lines and get a nice view restorer
            call vam#ActivateAddons(['abolish'])                    " save your hands from the evils of English
        endif
    " }

    " Snippet addons {
        if count(g:addon_groups, 'snippets')
            call vam#ActivateAddons(['neocomplcache'])
            call vam#ActivateAddons(['neosnippet'])
            call vam#ActivateAddons(['snipmate-snippets'])
        endif
    " }

    " Programming addons {
        if count(g:addon_groups, 'programming')
            call vam#ActivateAddons(['Syntastic'])          " Nice syntax checking for just about everything
            call vam#ActivateAddons(['WebAPI'])
            call vam#ActivateAddons(['Gist'])               " TODO: Depends on WebAPI. Make sure this is reflected in the package description
            call vam#ActivateAddons(['The_NERD_Commenter']) " useful commenting
            call vam#ActivateAddons(['Tabular'])            " pretty up your alignment
            if executable('ctags')
                call vam#ActivateAddons(['Tagbar'])
            endif
            if has('python') || has('python3')
                call vam#ActivateAddons(['conque-term'])    " for when you absolutely, positively, must have a terminal in vim
            endif
        endif
    " }

    " Haskell addons {
        if count(g:addon_groups, 'haskell')
            call vam#ActivateAddons(['github:dag/vim2hs'])          " lots of neat conveniences https://github.com/dag/vim2hs
            call vam#ActivateAddons(['github:eagletmt/ghcmod-vim']) " as if you need any more than this
            call vam#ActivateAddons(['neco-ghc'])                   " completion through ghc-mod
            call vam#ActivateAddons(['Haskell_Conceal'])            " pretty up your source files
            call vam#ActivateAddons(['github:bitc/lushtags'])       " this pulls the whole repo, including Haskell sources
        endif
    " }

    " LaTeX addons {
        if count(g:addon_groups, 'latex')
            call vam#ActivateAddons(['LaTeX_Box'])
            " This is pretty much all you need, but I'm planning to split each
            " of these groups into separate files to contain the configuration
            " stuff
            call vam#ActivateAddons(['latextags'])      " tag all the things
        endif
    " }"

    " Javascript Addons {
        if count(g:addon_groups, 'js')
            call vam#ActivateAddons(['JSON'])                           " might move this to general programming; JSON is becoming more common
            call vam#ActivateAddons(['github:pangloss/vim-javascript']) " best I've been able to find
        endif

    " }

    " HTML Addons {
        if count(g:addon_groups, 'html')
            call vam#ActivateAddons(['html5'])                         " supports all that WAI-ARIA goodness
            call vam#ActivateAddons(['HTML_AutoCloseTag'])             " testing; might remove later
            call vam#ActivateAddons(['github:hail2u/vim-css3-syntax']) " had good experiences with this one; still looking at options
        endif
    " }
    
    " Ruby Addons {
        if count(g:addon_groups, 'ruby')
            call vam#ActivateAddons(['rails'])      " I'll get to Ruby eventually, I promise
            let g:rubycomplete_buffer_loading = 1
            let g:rubycomplete_classes_in_global = 1
            let g:rubycomplete_rails = 1
        endif
    " }

    " Python {
        if count(g:addon_groups, 'python')
            call vam#ActivateAddons(['Python-mode-klen'])       " pretty much the best
            call vam#ActivateAddons(['python%790'])             " nice highlighting
            call vam#ActivateAddons(['python_match'])           " more nice matching
            call vam#ActivateAddons(['pythoncomplete'])         " and a set of completions
        endif
    " }

    " PHP {
        if count(g:addon_groups, 'php')
            call vam#ActivateAddons(['PIV'])        " all you need, and the only decent way to work with PHP
        endif
    " }
" }
