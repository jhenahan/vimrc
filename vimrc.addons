" VAM Setup {
    let g:vim_addon_manager = {'auto_install' : 1 }
        " Set up VAM {
            fun SetupVAM()
                let vam_install_path = expand('$HOME') . '/.vim/vim-addons'
                exec 'set rtp+='.vam_install_path.'/vim-addon-manager'
                let g:vim_addon_manager = {'auto_install' : 1 }
                if !isdirectory(vam_install_path.'/vim-addon-manager/autoload')
                    execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(vam_install_path, 1).'/vim-addon-manager'
                endif
                call vam#ActivateAddons([], {'auto_install' : 1})
            endfun
            call SetupVAM()
        " }
    " }

" Basic Addons {
    call vam#ActivateAddons(['Solarized'])          " solarized colorscheme
    call vam#ActivateAddons(['vim-addon-mw-utils']) " cache file contents
    call vam#ActivateAddons(['fugitive'])           " fugitive git is best git
    call vam#ActivateAddons(['gitv'])               " neat git visualizer
    if executable('ag')
        call vam#ActivateAddons(['ag'])             " a slave uses grep; a man uses ag!
    elseif executable('ack-grep')
        let g:ackprg='ack-grep -H --nocolor --nogroup --column'
        call vam#ActivateAddons(['ack'])
    elseif executable('ack')
        call vam#ActivateAddons(['ack'])
    endif
    " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
    " }
    " Solarized {
        if !has('gui_running') " Make terminal vim not quite so ugly under Solarized
            let g:solarized_termtrans=1
            let g:solarized_termcolors=256
        endif
    " }
" }

" Optional Addon Groups {
    " To limit the addons used, list the groups you want to use in
    " .vimrc.local
    if !exists('g:addon_groups')
        let g:addon_groups=['general','snippets', 'utility', 'programming','haskell','latex','js','html','ruby','python','php','haml']
    endif

    let g:vam_groups=expand('$HOME') . '/.vim/vim-addons/groups/'

    " General use addons {
        if count(g:addon_groups, 'general')
            call vam#ActivateAddons(['The_NERD_tree'])              " popular, though I don't use it much
            call vam#ActivateAddons(['surround'])                   " very convenient
            call vam#ActivateAddons(['delimitMate'])                " A little nicer than AutoClose
            call vam#ActivateAddons(['ctrlp'])                      " preferable to Ctrl-T -- might be ditching this in the future
            call vam#ActivateAddons(['ctrlp-modified'])             " not sure what this does, but we'll see
            call vam#ActivateAddons(['matchit.zip'])                " make % cool
            call vam#ActivateAddons(['powerline'])              " Powerline is where it's at
            call vam#ActivateAddons(['EasyMotion'])                 " make motion commands sexy again
            call vam#ActivateAddons(['CSApprox'])                   " if for some reason Zenburn is not to your taste
            call vam#ActivateAddons(['undotree'])                   " it's practically magic
            call vam#ActivateAddons(['github:myusuf3/numbers.vim']) " never count lines again!
            call vam#ActivateAddons(['Indent_Guides'])              " don't count your tabs, either
            call vam#ActivateAddons(['restore_view'])               " save some lines and get a nice view restorer
            call vam#ActivateAddons(['abolish'])                    " save your hands from the evils of English
            call vam#ActivateAddons(['rainbow_parentheses'])        " stray parens begone!
            call vam#ActivateAddons(['LustyExplorer'])          " Looks like a cooler version of BufExplorer
            call vam#ActivateAddons(['Indent_Guides'])          " Useful
            let g:NERDShutUp=1
            let b:match_ignorecase = 1

            " NerdTree Settings {
                map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
                map <leader>e :NERDTreeFind<CR>
                nmap <leader>nt :NERDTreeFind<CR>

                let NERDTreeShowBookmarks               = 1
                let NERDTreeIgnore                      = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
                let NERDTreeChDirMode                   = 0
                let NERDTreeQuitOnOpen                  = 1
                let NERDTreeMouseMode                   = 2
                let NERDTreeShowHidden                  = 1
                let NERDTreeKeepTreeInNewTab            = 1
                let g:nerdtree_tabs_open_on_gui_startup = 0
            " }
            " ctrlp {
                let g:ctrlp_working_path_mode = 2
                nnoremap <silent> <D-t> :CtrlP<CR>
                nnoremap <silent> <D-r> :CtrlPMRU<CR>
                let g:ctrlp_custom_ignore = {
                            \ 'dir': '\.git$\|\.hg$\|\.svn$',
                            \ 'file': '\.exe$\|\.so$\|\.dll$' }
            " }
            " UndoTree {
                nnoremap <Leader>u :UndotreeToggle<CR>
                let g:undotree_SetFocusWhenToggle=1 " if undotree is opened, it is likely one wants to interact with it.
            " }
            " indent_guides {
                let g:indent_guides_auto_colors = 1
                " for some colorschemes ,autocolor will not work,like 'desert','ir_black'.
                autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#212121 ctermbg=3
                autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=4
                set ts=4 sw=4 et
                let g:indent_guides_start_level           = 2
                let g:indent_guides_guide_size            = 1
                let g:indent_guides_enable_on_vim_startup = 1
            " }
            " Powerline {
                setlocal laststatus=2
            " }
            " Rainbow Parens {
                au VimEnter * RainbowParenthesesToggle
                au Syntax * RainbowParenthesesLoadRound
                au Syntax * RainbowParenthesesLoadSquare
                au Syntax * RainbowParenthesesLoadBraces
            " }
        endif
        " }

    " Snippet addons {
        if count(g:addon_groups, 'snippets')
            call vam#ActivateAddons(['neocomplcache'])
            call vam#ActivateAddons(['neosnippet'])
        " neocomplcache {
            let g:acp_enableAtStartup                        = 0
            let g:neocomplcache_enable_at_startup            = 1
            let g:neocomplcache_enable_camel_case_completion = 1
            let g:neocomplcache_enable_smart_case            = 1
            let g:neocomplcache_enable_underbar_completion   = 1
            let g:neocomplcache_enable_auto_delimiter        = 1
            let g:neocomplcache_max_list                     = 15
            let g:neocomplcache_force_overwrite_completefunc = 1
        " }
        " SuperTab like snippets behavior.
            imap <silent><expr><TAB> neosnippet#expandable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                \ "\<C-e>" : "\<TAB>")
        smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

        " Define dictionary.
            let g:neocomplcache_dictionary_filetype_lists = { 'default' : '' }

        " Define keyword.
            if !exists('g:neocomplcache_keyword_patterns')
            let g:neocomplcache_keyword_patterns = {}
            endif
            let g:neocomplcache_keyword_patterns._ = '\h\w*'

        " Plugin key-mappings.
            imap <C-k> <Plug>(neosnippet_expand_or_jump)
            smap <C-k> <Plug>(neosnippet_expand_or_jump)
            inoremap <expr><C-g> neocomplcache#undo_completion()
            inoremap <expr><C-l> neocomplcache#complete_common_string()
            inoremap <expr><CR> neocomplcache#complete_common_string()

        " <TAB>: completion.
            inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
            inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

        " <CR>: close popup
        " <s-CR>: close popup and save indent.
            inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()"\<CR>" : "\<CR>"
            inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"

        " <C-h>, <BS>: close popup and delete backword char.
            inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
            inoremap <expr><C-y> neocomplcache#close_popup()

        " Enable omni completion.
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
            autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

        " Enable heavy omni completion.
            if !exists('g:neocomplcache_omni_patterns')
            let g:neocomplcache_omni_patterns = {}
            endif
            let g:neocomplcache_omni_patterns.php  = '[^. \t]->\h\w*\|\h\w*::'
            let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
            let g:neocomplcache_omni_patterns.c    = '[^.[:digit:] *\t]\%(\.\|->\)'
            let g:neocomplcache_omni_patterns.cpp  = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
            let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
        " For snippet_complete marker.
            if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
    endif
    " }

    " Utility addons {
        if count(g:addon_groups, 'utility')
            call vam#ActivateAddons(['Tabular'])            " pretty up your alignment
            " Tabularize shortcuts {
                nmap <leader>a= :Tabularize /=<CR>
                vmap <Leader>a= :Tabularize /=<CR>
                nmap <Leader>a: :Tabularize /:<CR>
                vmap <Leader>a: :Tabularize /:<CR>
                nmap <Leader>a:: :Tabularize /:\zs<CR>
                vmap <Leader>a:: :Tabularize /:\zs<CR>
                nmap <Leader>a, :Tabularize /,<CR>
                vmap <Leader>a, :Tabularize /,<CR>
                nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
                vmap <Leader>a<Bar> :Tabularize /<Bar><CR> <Leader>a= :Tabularize /=<CR>
                vmap <Leader>a= :Tabularize /=<CR>
                nmap <Leader>a: :Tabularize /:<CR>
                vmap <Leader>a: :Tabularize /:<CR>
                nmap <Leader>a:: :Tabularize /:\zs<CR>
                vmap <Leader>a:: :Tabularize /:\zs<CR>
                nmap <Leader>a, :Tabularize /,<CR>
                vmap <Leader>a, :Tabularize /,<CR>
                nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
                vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
            " }
        endif
    " }

    " Programming addons {
        if count(g:addon_groups, 'programming')
            call vam#ActivateAddons(['Syntastic'])          " Nice syntax checking for just about everything
            call vam#ActivateAddons(['WebAPI'])
            call vam#ActivateAddons(['Gist'])               " TODO: Depends on WebAPI. Make sure this is reflected in the package description
            call vam#ActivateAddons(['The_NERD_Commenter']) " useful commenting
            if executable('ctags')
                call vam#ActivateAddons(['Tagbar'])
        " TagBar {
            nnoremap <silent> <leader>tt :TagbarToggle<CR>
        " }
        " Ctags {
            set tags=./tags;/,~/.vimtags
        " }
            endif
            if has('python') || has('python3')
                call vam#ActivateAddons(['Conque_Shell'])   " for when you absolutely, positively, must have a terminal in vim
            endif
            call vam#ActivateAddons(['vimproc'])            " run processes within vim

            " Strip whitespace {
            fun! StripWhitespace()
                let _s=@/
                let l = line(".")
                let c = col(".")
                %s/\s\+$//e
                let @/=_s
                call cursor(l, c)
            endfun
            " this has potential to be dangerous, so comment out if you're not a fan
            autocmd FileType c,cpp,java,php,hs,tex,rust autocmd BufWritePre <buffer> call StripWhitespace()

        endif
    " }

    " Haskell addons {
        if count(g:addon_groups, 'haskell')
            call vam#ActivateAddons(['github:dag/vim2hs'])          " lots of neat conveniences https://github.com/dag/vim2hs
            call vam#ActivateAddons(['ghcmod']) " as if you need any more than this
            call vam#ActivateAddons(['neco-ghc'])                   " completion through ghc-mod
            " call vam#ActivateAddons(['github:bitc/lushtags'])       " this pulls the whole repo, including Haskell sources
            autocmd BufWritePost *.hs GhcModCheckAndLintAsync
            let g:haskell_conceal_wide = 1
            let g:haskell_conceal_bad = 1
        endif
    " }

    " LaTeX addons {
        if count(g:addon_groups, 'latex')
            call vam#ActivateAddons(['LaTeX_Box'])
            " This is pretty much all you need, but I'm planning to split each
            " of these groups into separate files to contain the configuration
            " stuff
            let g:LatexBox_output_type = "pdf"
            let g:LatexBox_autojump = 1 
            let g:tex_flavor='latex'
        endif
    " }"

    " Javascript Addons {
        if count(g:addon_groups, 'js')
            call vam#ActivateAddons(['JSON'])                           " might move this to general programming; JSON is becoming more common
            call vam#ActivateAddons(['vim-javascript']) " best I've been able to find
        " JSON {
            nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
        " }
        endif

    " }

    " HTML Addons {
        if count(g:addon_groups, 'html')
            call vam#ActivateAddons(['html5'])                         " supports all that WAI-ARIA goodness
            call vam#ActivateAddons(['HTML_AutoCloseTag'])             " testing; might remove later
            call vam#ActivateAddons(['vim-css3-syntax']) " had good experiences with this one; still looking at options
        " AutoCloseTag {
            " Make it so AutoCloseTag works for xml and xhtml files as well
        au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
        nmap <Leader>ac <Plug>ToggleAutoCloseMappings
        " }
        endif
    " }

    " Ruby Addons {
        if count(g:addon_groups, 'ruby')
            call vam#ActivateAddons(['vim-ruby'])      " I'll get to Ruby eventually, I promise
            call vam#ActivateAddons(['rails'])      " I'll get to Ruby eventually, I promise
            let g:rubycomplete_buffer_loading = 1
            let g:rubycomplete_classes_in_global = 1
            let g:rubycomplete_rails = 1
        endif
    " }

    " Python {
        if count(g:addon_groups, 'python')
            call vam#ActivateAddons(['Python-mode-klen'])       " pretty much the best
            call vam#ActivateAddons(['python%790'])             " nice highlighting
            call vam#ActivateAddons(['python_match'])           " more nice matching
            call vam#ActivateAddons(['pythoncomplete'])         " and a set of completions
        " PyMode {
            let g:pymode_lint_checker = "pyflakes"
        " }
        " PythonMode {
            " Disable if python support not present
        if !has('python')
            let g:pymode = 1
        endif
        " }
        endif
    " }

    " PHP {
        if count(g:addon_groups, 'php')
            call vam#ActivateAddons(['PIV'])        " all you need, and the only decent way to work with PHP
        endif
        let g:DisableAutoPHPFolding = 0
        let g:PIVAutoClose = 0
    " }

    " Haml {
        if count(g:addon_groups, 'haml')
            call vam#ActivateAddons(['haml.zip'])       " closing tags? no thanks
            call vam#ActivateAddons(['scss-syntax'])    " no more vendor prefixes
        endif
    " }
" }
